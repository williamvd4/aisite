# Generated by Django 5.0.4 on 2024-05-23 10:00

from django.db import migrations

SUBJECTS = [
    {"name": "Mathematics", "description": "The study of numbers, quantity, space, structure, and change."},
    {"name": "English Language Arts", "description": "The study of literature, composition, and language."},
    {"name": "Science", "description": "The systematic study of the structure and behavior of the physical and natural world through observation and experiment."},
    {"name": "Social Studies", "description": "The study of human society and social relationships."},
    {"name": "Art", "description": "The expression or application of human creative skill and imagination."},
    {"name": "Music", "description": "The art of arranging sounds in time to produce a composition through the elements of melody, harmony, rhythm, and timbre."},
    {"name": "Physical Education", "description": "Instruction in physical exercise and games."},
    {"name": "Health", "description": "The state of being free from illness or injury, and the study of practices to maintain it."},
    {"name": "Technology", "description": "The application of scientific knowledge for practical purposes, especially in industry."},
    {"name": "World Languages", "description": "The study of languages other than one's native language."}
]

GRADES = [
    {"level": "Pre-Kindergarten", "order": 0},
    {"level": "Kindergarten", "order": 1},
    {"level": "1st Grade", "order": 2},
    {"level": "2nd Grade", "order": 3},
    {"level": "3rd Grade", "order": 4},
    {"level": "4th Grade", "order": 5},
    {"level": "5th Grade", "order": 6},
    {"level": "6th Grade", "order": 7},
    {"level": "7th Grade", "order": 8},
    {"level": "8th Grade", "order": 9},
    {"level": "9th Grade", "order": 10},
    {"level": "10th Grade", "order": 11},
    {"level": "11th Grade", "order": 12},
    {"level": "12th Grade", "order": 13},
    {"level": "Higher Education", "order": 14},
    {"level": "Adult Education", "order": 15},
    {"level": "Professional Development", "order": 16}
]

# Example standards - you would expand this significantly for a real application
STANDARDS_DATA = {
    "Mathematics": {
        "Kindergarten": [
            {"code": "CCSS.MATH.CONTENT.K.CC.A.1", "description": "Count to 100 by ones and by tens."},
            {"code": "CCSS.MATH.CONTENT.K.OA.A.1", "description": "Represent addition and subtraction with objects, fingers, mental images, drawings, sounds (e.g., claps), acting out situations, verbal explanations, expressions, or equations."}
        ],
        "5th Grade": [
            {"code": "CCSS.MATH.CONTENT.5.NF.A.1", "description": "Add and subtract fractions with unlike denominators (including mixed numbers) by replacing given fractions with equivalent fractions in such a way as to produce an equivalent sum or difference of fractions with like denominators."}
        ]
    },
    "English Language Arts": {
        "3rd Grade": [
            {"code": "CCSS.ELA-LITERACY.RL.3.1", "description": "Ask and answer questions to demonstrate understanding of a text, referring explicitly to the text as the basis for the answers."}
        ]
    }
}

def populate_data(apps, schema_editor):
    Subject = apps.get_model('home', 'Subject')
    Grade = apps.get_model('home', 'Grade')
    Standard = apps.get_model('home', 'Standard')

    # Populate Subjects
    for sub_data in SUBJECTS:
        Subject.objects.get_or_create(name=sub_data["name"], defaults=sub_data)

    # Populate Grades
    for grade_data in GRADES:
        Grade.objects.get_or_create(level=grade_data["level"], defaults=grade_data)

    # Populate Standards
    for subject_name, grades_data in STANDARDS_DATA.items():
        subject_obj = Subject.objects.get(name=subject_name)
        for grade_level, standards_list in grades_data.items():
            grade_obj = Grade.objects.get(level=grade_level)
            for std_data in standards_list:
                Standard.objects.get_or_create(
                    code=std_data["code"], 
                    defaults={
                        'description': std_data["description"],
                        'subject': subject_obj,
                        'grade': grade_obj
                    }
                )

def reverse_populate_data(apps, schema_editor):
    # This function could be used to remove the data if the migration is unapplied
    # For this initial population, we might not need a complex reverse function,
    # or we could choose to delete all instances of these models.
    # However, be cautious with deleting data in a reverse migration.
    Subject = apps.get_model('home', 'Subject')
    Grade = apps.get_model('home', 'Grade')
    Standard = apps.get_model('home', 'Standard')

    # A simple approach: delete based on the codes/names we added.
    # This is not exhaustive if other data was manually added.
    for sub_data in SUBJECTS:
        Subject.objects.filter(name=sub_data["name"]).delete()
    for grade_data in GRADES:
        Grade.objects.filter(level=grade_data["level"]).delete()
    for _, grades_data in STANDARDS_DATA.items():
        for _, standards_list in grades_data.items():
            for std_data in standards_list:
                Standard.objects.filter(code=std_data["code"]).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('home', '0005_grade_subject_alter_curriculum_options_and_more'), # Replace with your previous migration filename
    ]

    operations = [
        migrations.RunPython(populate_data, reverse_code=reverse_populate_data),
    ]
