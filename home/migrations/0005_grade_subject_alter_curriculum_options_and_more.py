# Generated by Django 4.2.9 on 2025-05-23 12:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("home", "0004_alter_myformmodel_title"),
    ]

    operations = [
        migrations.CreateModel(
            name="Grade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("level", models.CharField(max_length=50, unique=True)),
                ("order", models.IntegerField(help_text="Order for sorting grades")),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="Subject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.AlterModelOptions(
            name="curriculum",
            options={"ordering": ["-updated_at"]},
        ),
        migrations.AlterModelOptions(
            name="material",
            options={"ordering": ["-updated_at"]},
        ),
        migrations.AlterModelOptions(
            name="resource",
            options={"ordering": ["-updated_at"]},
        ),
        migrations.AddField(
            model_name="curriculum",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name="curriculum",
            name="description",
            field=models.TextField(blank=True, default=""),
        ),
        migrations.AddField(
            model_name="curriculum",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name="material",
            name="description",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="material",
            name="file",
            field=models.FileField(blank=True, null=True, upload_to="materials/"),
        ),
        migrations.AddField(
            model_name="material",
            name="is_public",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="material",
            name="material_type",
            field=models.CharField(
                choices=[
                    ("handout", "Handout"),
                    ("worksheet", "Worksheet"),
                    ("presentation", "Presentation"),
                    ("video", "Video"),
                    ("interactive", "Interactive Activity"),
                    ("assessment", "Assessment"),
                    ("other", "Other"),
                ],
                default="other",
                max_length=50,
            ),
        ),
        migrations.AddField(
            model_name="material",
            name="url",
            field=models.URLField(blank=True, help_text="External resource URL"),
        ),
        migrations.AddField(
            model_name="resource",
            name="is_public",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="resource",
            name="resource_type",
            field=models.CharField(
                choices=[
                    ("website", "Website"),
                    ("video", "Video"),
                    ("article", "Article"),
                    ("book", "Book"),
                    ("tool", "Online Tool"),
                    ("game", "Educational Game"),
                    ("other", "Other"),
                ],
                default="website",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="material",
            name="content",
            field=models.TextField(help_text="Material content or instructions"),
        ),
        migrations.CreateModel(
            name="Standard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=50, unique=True)),
                ("description", models.TextField()),
                (
                    "grade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standards",
                        to="home.grade",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standards",
                        to="home.subject",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LessonPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "description",
                    models.TextField(help_text="Brief description of the lesson"),
                ),
                (
                    "duration",
                    models.IntegerField(
                        choices=[
                            (30, "30 minutes"),
                            (45, "45 minutes"),
                            (60, "1 hour"),
                            (90, "1.5 hours"),
                            (120, "2 hours"),
                        ],
                        default=45,
                        help_text="Duration in minutes",
                    ),
                ),
                (
                    "learning_objectives",
                    models.TextField(
                        help_text="What students will learn/be able to do"
                    ),
                ),
                (
                    "essential_question",
                    models.TextField(
                        blank=True, help_text="Key question driving the lesson"
                    ),
                ),
                (
                    "materials_needed",
                    models.TextField(
                        help_text="List of required materials and resources"
                    ),
                ),
                (
                    "opening_activity",
                    models.TextField(help_text="How the lesson begins"),
                ),
                (
                    "main_instruction",
                    models.TextField(help_text="Core teaching/learning activities"),
                ),
                (
                    "guided_practice",
                    models.TextField(
                        blank=True, help_text="Structured practice with teacher support"
                    ),
                ),
                (
                    "independent_practice",
                    models.TextField(blank=True, help_text="Individual student work"),
                ),
                (
                    "closing_activity",
                    models.TextField(help_text="How the lesson concludes"),
                ),
                (
                    "formative_assessment",
                    models.TextField(
                        help_text="How you'll check for understanding during lesson"
                    ),
                ),
                (
                    "summative_assessment",
                    models.TextField(
                        blank=True, help_text="How learning will be evaluated"
                    ),
                ),
                (
                    "differentiation_strategies",
                    models.TextField(help_text="Accommodations for different learners"),
                ),
                (
                    "homework_assignment",
                    models.TextField(blank=True, help_text="Any assigned homework"),
                ),
                (
                    "extension_activities",
                    models.TextField(
                        blank=True, help_text="Activities for early finishers"
                    ),
                ),
                (
                    "reflection_notes",
                    models.TextField(
                        blank=True, help_text="Post-lesson reflection and notes"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_public",
                    models.BooleanField(
                        default=False, help_text="Share with other teachers"
                    ),
                ),
                (
                    "is_template",
                    models.BooleanField(
                        default=False, help_text="Available as template"
                    ),
                ),
                (
                    "grade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_plans",
                        to="home.grade",
                    ),
                ),
                (
                    "standards",
                    models.ManyToManyField(
                        blank=True, related_name="lesson_plans", to="home.standard"
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_plans",
                        to="home.subject",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Lesson Plan",
                "verbose_name_plural": "Lesson Plans",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.AddField(
            model_name="curriculum",
            name="grade",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="curriculums",
                to="home.grade",
            ),
        ),
        migrations.AddField(
            model_name="curriculum",
            name="lesson_plans",
            field=models.ManyToManyField(
                blank=True, related_name="curriculums", to="home.lessonplan"
            ),
        ),
        migrations.AddField(
            model_name="curriculum",
            name="subject",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="curriculums",
                to="home.subject",
            ),
        ),
        migrations.AddField(
            model_name="material",
            name="grade",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="materials",
                to="home.grade",
            ),
        ),
        migrations.AddField(
            model_name="material",
            name="lesson_plans",
            field=models.ManyToManyField(
                blank=True, related_name="materials", to="home.lessonplan"
            ),
        ),
        migrations.AddField(
            model_name="material",
            name="subject",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="materials",
                to="home.subject",
            ),
        ),
        migrations.AddField(
            model_name="resource",
            name="grade",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="resources",
                to="home.grade",
            ),
        ),
        migrations.AddField(
            model_name="resource",
            name="lesson_plans",
            field=models.ManyToManyField(
                blank=True, related_name="resources", to="home.lessonplan"
            ),
        ),
        migrations.AddField(
            model_name="resource",
            name="subject",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="resources",
                to="home.subject",
            ),
        ),
        migrations.CreateModel(
            name="LessonSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scheduled_date", models.DateField()),
                ("start_time", models.TimeField(blank=True, null=True)),
                ("end_time", models.TimeField(blank=True, null=True)),
                (
                    "class_period",
                    models.CharField(
                        blank=True,
                        help_text="Period 1, Math Class, etc.",
                        max_length=100,
                    ),
                ),
                ("classroom", models.CharField(blank=True, max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Planned"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="planned",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes about this specific lesson instance",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lesson_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="schedules",
                        to="home.lessonplan",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_schedules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["scheduled_date", "start_time"],
                "unique_together": {
                    ("user", "scheduled_date", "start_time", "class_period")
                },
            },
        ),
    ]
